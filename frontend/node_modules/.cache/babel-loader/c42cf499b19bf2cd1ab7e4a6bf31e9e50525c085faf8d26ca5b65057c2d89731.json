{"ast":null,"code":"import { address, token } from \"./constants\";\nclass Api {\n  constructor(_ref) {\n    let {\n      address,\n      token\n    } = _ref;\n    this._address = address;\n    this._token = token;\n    this._headers = {\n      authorization: this._token,\n      \"Content-Type\": \"application/json\"\n    };\n  }\n\n  //обработка запроса\n  _request(url, options) {\n    const fetchAddress = `${this._address}/${url}`;\n    return fetch(fetchAddress, options).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(`Ошибка ${res.status}`);\n      }\n    });\n  }\n\n  //получение информации о пользователе с сервера\n  getUserInfo() {\n    return this._request(`users/me`, {\n      headers: this._headers\n    });\n  }\n\n  //получение карточек\n  getCards() {\n    return this._request(`cards`, {\n      headers: this._headers\n    });\n  }\n\n  //передача карточки на сервер\n  postCard(_ref2) {\n    let {\n      name,\n      link\n    } = _ref2;\n    return this._request(`cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    });\n  }\n\n  //простановка лайка\n  _putLike(id) {\n    return this._request(`cards/${id}/likes`, {\n      method: \"PUT\",\n      headers: this._headers\n    });\n  }\n\n  //удоление лайка\n  _delLike(id) {\n    return this._request(`cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers\n    });\n  }\n\n  //установка/снятие лайка\n  toggleLike(cardId, isLiked) {\n    return isLiked ? this._delLike(cardId) : this._putLike(cardId);\n  }\n\n  //удаление карточки\n  delCard(id) {\n    return this._request(`cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    });\n  }\n\n  //передача информации о пользователе на сервер\n  patchProfile(_ref3) {\n    let {\n      name,\n      about\n    } = _ref3;\n    return this._request(`users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    });\n  }\n\n  //передача аватарки на сервер\n  patchAvatar(avatar) {\n    return this._request(`users/me/avatar`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        avatar\n      }),\n      headers: this._headers\n    });\n  }\n}\nexport const api = new Api({\n  address,\n  token\n});","map":{"version":3,"names":["address","token","Api","constructor","_ref","_address","_token","_headers","authorization","_request","url","options","fetchAddress","fetch","then","res","ok","json","Promise","reject","status","getUserInfo","headers","getCards","postCard","_ref2","name","link","method","body","JSON","stringify","_putLike","id","_delLike","toggleLike","cardId","isLiked","delCard","patchProfile","_ref3","about","patchAvatar","avatar","api"],"sources":["C:/Users/nub24/dev/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["import { address, token } from \"./constants\";\r\n\r\nclass Api {\r\n  constructor({ address, token }) {\r\n    this._address = address;\r\n    this._token = token;\r\n    this._headers = {\r\n      authorization: this._token,\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n  }\r\n\r\n  //обработка запроса\r\n  _request(url, options) {\r\n    const fetchAddress = `${this._address}/${url}`\r\n\r\n    return fetch(fetchAddress, options).then(res => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return Promise.reject(`Ошибка ${res.status}`);\r\n      }\r\n    })\r\n  }\r\n\r\n  //получение информации о пользователе с сервера\r\n  getUserInfo() {\r\n    return this._request(`users/me`, {\r\n      headers: this._headers,\r\n    })\r\n  }\r\n\r\n  //получение карточек\r\n  getCards() {\r\n    return this._request(`cards`, {\r\n      headers: this._headers,\r\n    })\r\n  }\r\n\r\n  //передача карточки на сервер\r\n  postCard({ name, link }) {\r\n    return this._request(`cards`, {\r\n      method: \"POST\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name,\r\n        link,\r\n      }),\r\n    })\r\n  }\r\n\r\n  //простановка лайка\r\n  _putLike(id) {\r\n    return this._request(`cards/${id}/likes`, {\r\n      method: \"PUT\",\r\n      headers: this._headers,\r\n    })\r\n  }\r\n\r\n  //удоление лайка\r\n  _delLike(id) {\r\n    return this._request(`cards/${id}/likes`, {\r\n      method: \"DELETE\",\r\n      headers: this._headers,\r\n    })\r\n  }\r\n\r\n  //установка/снятие лайка\r\n  toggleLike(cardId, isLiked) {\r\n    return isLiked ? this._delLike(cardId) : this._putLike(cardId);\r\n  }\r\n\r\n  //удаление карточки\r\n  delCard(id) {\r\n    return this._request(`cards/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: this._headers,\r\n    })\r\n  }\r\n\r\n  //передача информации о пользователе на сервер\r\n  patchProfile({ name, about }) {\r\n    return this._request(`users/me`, {\r\n      method: \"PATCH\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({ name, about }),\r\n    })\r\n  }\r\n\r\n  //передача аватарки на сервер\r\n  patchAvatar(avatar) {\r\n    return this._request(`users/me/avatar`, {\r\n      method: \"PATCH\",\r\n      body: JSON.stringify({ avatar }),\r\n      headers: this._headers,\r\n    })\r\n  }\r\n}\r\n\r\nexport const api = new Api({ address, token });\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}